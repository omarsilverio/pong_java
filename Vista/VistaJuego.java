/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Vista;

import Componentes.Circulo;
import Componentes.Cuadrado;
import Componentes.Linea;
import Componentes.Punto;
import Elementos.Tablero;
import Transformacion.Transformaciones;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Random;
import java.util.Stack;
import javax.swing.JOptionPane;


/**
 *
 * @author omarsilverio
 */
public class VistaJuego extends javax.swing.JFrame{
   private final Transformaciones tranformaciones = new Transformaciones();
   //Configuraciones
   private static final int POSXJUGADOR1 = 0;
   private static final int POSXJUGADOR2 = 508;
   private static final int POSINICIAL = 200;
   private static final int TAMANIORAQUETA = 90;
   private static final int DESPLAZAMIENTO = 20;
   private static final long VELOCIDADPELOTA = 1;
   
   private static final int AREAANOTACION1 = 0; // eje x del espacio del jugador uno
   private static final int AREAANOTACION2 = 530; // eje x del espacio del jugador dos
   //Elementos del juego   
   private Cuadrado RAQUETA1 = new Cuadrado(new Punto(POSXJUGADOR1,POSINICIAL),TAMANIORAQUETA,20);
   private final Cuadrado RAQUETA2 = new Cuadrado(new Punto(POSXJUGADOR2,POSINICIAL),TAMANIORAQUETA,20);
   private Cuadrado CAMPO = new Cuadrado(new Punto(0,0),AREAANOTACION2,AREAANOTACION2);
   private Circulo PELOTA = new Circulo(20,new Punto(300,300));
   //PARTIDA
   private boolean start = false;
   private Partida PARTIDA;
   
   //Ganador
   private static final int PUNTAJEMAXIMO = 3;
   
   
    
    private static final Dimension ESPACIOTABLERO = new Dimension(400,507); //Establece aqui el tamaño del tablero
    
    private final  Tablero TABLERO  = new Tablero(RAQUETA1,RAQUETA2,PELOTA, CAMPO); //Establece aqui el tablero :v
   
    
 
    
    /**
     * Creates new form VistaJuego
     */
    public VistaJuego() {
         TABLERO.setSize(ESPACIOTABLERO);//tamaño del tablero         
         initComponents();
         this.add(TABLERO, BorderLayout.CENTER);
         this.setFocusable(true);
         this.setResizable(false);         
         
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        areaJuego = new javax.swing.JPanel();
        areaPuntaje = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        score1 = new javax.swing.JLabel();
        score2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        areaJuego.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        areaJuego.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                areaJuegoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                areaJuegoKeyReleased(evt);
            }
        });
        areaJuego.setLayout(new java.awt.BorderLayout());
        getContentPane().add(areaJuego, java.awt.BorderLayout.CENTER);

        areaPuntaje.setBackground(new java.awt.Color(0, 0, 0));
        areaPuntaje.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                areaPuntajeKeyPressed(evt);
            }
        });
        areaPuntaje.setLayout(new java.awt.GridBagLayout());

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Jugador 1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 6, 21, 0);
        areaPuntaje.add(jLabel1, gridBagConstraints);

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Jugador 2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 154, 21, 6);
        areaPuntaje.add(jLabel2, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Oriya Sangam MN", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("SCORE");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 148, 0, 0);
        areaPuntaje.add(jLabel3, gridBagConstraints);

        score1.setFont(new java.awt.Font("Oriya Sangam MN", 1, 24)); // NOI18N
        score1.setForeground(new java.awt.Color(255, 255, 255));
        score1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        score1.setText("0");
        score1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 43;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        areaPuntaje.add(score1, gridBagConstraints);

        score2.setFont(new java.awt.Font("Oriya Sangam MN", 1, 24)); // NOI18N
        score2.setForeground(new java.awt.Color(255, 255, 255));
        score2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        score2.setText("0");
        score2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 45;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 154, 0, 6);
        areaPuntaje.add(score2, gridBagConstraints);

        getContentPane().add(areaPuntaje, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void areaJuegoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_areaJuegoKeyPressed
        
    }//GEN-LAST:event_areaJuegoKeyPressed

    private void areaPuntajeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_areaPuntajeKeyPressed
        JOptionPane.showMessageDialog(this,evt.getKeyChar());
    }//GEN-LAST:event_areaPuntajeKeyPressed

    private void areaJuegoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_areaJuegoKeyReleased
        JOptionPane.showMessageDialog(this,evt.getKeyChar());
    }//GEN-LAST:event_areaJuegoKeyReleased

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        char caracter = evt.getKeyChar();  
        int caracterCode = evt.getKeyCode();
        obtenerPulsaciones(caracter, caracterCode);
        
    }//GEN-LAST:event_formKeyReleased
    
    /**
     * @param caracter tecla presionada
     * @param caracterCode codigo de la tecla presionada
     * Optiene las pulsaciones
     * w = jugador1 arriba s = jugador1 abajo
     * judardor2 boton 38 = arriba, boton 40 = abajo 
     */
    public void obtenerPulsaciones(char caracter, int caracterCode){ 
        if(!start){
            start = true;
            if(caracter == 'w' || caracter == 's') { 
                PARTIDA = new Partida(-1);
                PARTIDA.start();
                
            }
            if(caracterCode == 40 || caracterCode == 38){
                PARTIDA = new Partida(1);
                PARTIDA.start();                
            }
        }
        //Movimientos para el jugador 1
        if(caracter == 'w' || caracter == 's')            
            if(caracter == 'w')               
                RAQUETA1.setContorno(tranformaciones.trasladarRaqueta(POSXJUGADOR1, -DESPLAZAMIENTO, RAQUETA1.getContorno()));           
            else              
                RAQUETA1.setContorno(tranformaciones.trasladarRaqueta(POSXJUGADOR1, DESPLAZAMIENTO, RAQUETA1.getContorno()));       
         //Movimientos para el jugador 2
        if(caracterCode == 40 || caracterCode == 38)          
            if(caracterCode == 38)                
                RAQUETA2.setContorno(tranformaciones.trasladarRaqueta(POSXJUGADOR2, -DESPLAZAMIENTO, RAQUETA2.getContorno()));
            else             
                RAQUETA2.setContorno(tranformaciones.trasladarRaqueta(POSXJUGADOR2, DESPLAZAMIENTO, RAQUETA2.getContorno())); 
    }
   
    /**
     * trayectoria para la pelota con dirección en horizontal
     */
    
   
    private class Partida extends Thread{
        
        Linea linea; //Trayectoria en linea recta
        int jugadorInicio;// -1 jugador 1 y 1 jugador 2
        int emisor = 0, receptor = 0;
        Iterator<Punto> trayectoriaTemp = null;
        Punto inicioAleatorio = getPuntoInicio();
        Punto puntoMedioTemp = null;
        boolean band = true; 
        
        public Partida(int jugadorInicio){
            this.jugadorInicio = jugadorInicio;
        }
        @Override
        public void run(){            
            if(jugadorInicio == -1){
                linea = desplazarRecto(inicioAleatorio, 1);  
                emisor = 1;
                receptor = -1;
            }else if(jugadorInicio == 1){
                linea = desplazarRecto(inicioAleatorio, -1);  
                emisor = -1;
                receptor = 1;
            }
            trayectoriaTemp = linea.getContorno().iterator(); //Treyectoria inicial
            //El desarrollo de la partida          
                try{                                       
                        while(band){ 
                            puntoMedioTemp = trayectoriaTemp.next();
                            PELOTA = new Circulo(20,puntoMedioTemp);
                            TABLERO.setPosicionPelota(PELOTA);
                            puntoMedioTemp = null;
                            //Comprueba si la pelota tiene que rebotar                            
                            if(rebotar(PELOTA))
                                rebotePelota();
                            else
                                comprobarAnotacion();
                            //Comprueba si reboto en una linea de rebote
                            sleep(VELOCIDADPELOTA);                            
                            actualizarLienzo();
                            puntoMedioTemp = trayectoriaTemp.next();
                        }
                }catch(InterruptedException e){
                     JOptionPane.showMessageDialog(rootPane, e);
                }           
                      
                                
        }
        /**
         * Comprueba que emisor reboto la pelota
         */
        public void rebotePelota(){
            if(emisor == -1){
                linea = desplazarInclinado(PELOTA.getPuntoMedio(), -1);
                if(linea == null)
                    rebotePelota();
                trayectoriaTemp = linea.getContorno().iterator();
            }
            else if(emisor == 1){
                    linea = desplazarInclinado(PELOTA.getPuntoMedio(), 1);
                    if(linea == null)
                        rebotePelota();
                    trayectoriaTemp = linea.getContorno().iterator();
            } 
            //trayectoriaTemp = null;
            
        }
        /**
         * Comprueba si se anoto un punto o si 
         */
        public void comprobarAnotacion(){
            //Camprueba que nadie haya anotado puntos
            switch (anotacion(PELOTA, emisor)) {
                case 0 ->{ trayectoriaLanzamiento();
                //trayectoriaTemp = linea.getContorno().iterator();
                }
                case -1 -> {
                    inicioAleatorio = getPuntoInicio();
                    int scr2 = Integer.parseInt(score2.getText()) + 1;
                    score2.setText(scr2 + "");
                    if(scr2 == PUNTAJEMAXIMO){
                        band = false;
                      
                        animacionGanador(RAQUETA2);
                        animacionPerdedor(RAQUETA1);
                        JOptionPane.showMessageDialog(rootPane, "Gano jugador 2");
                    }                       
                                        
                    linea = desplazarRecto(inicioAleatorio, -1);
                    trayectoriaTemp = null;
                    trayectoriaTemp = linea.getContorno().iterator();
                    emisor = 1;
                    receptor = -1;
                }
                case 1 -> {
                    int scr1 = Integer.parseInt(score1.getText()) + 1;
                    score1.setText(scr1 + "");
                    if(scr1 == PUNTAJEMAXIMO){
                        band = false;    
                       
                        animacionGanador(RAQUETA1);
                        animacionPerdedor(RAQUETA2);
                        JOptionPane.showMessageDialog(rootPane, "Gano jugador 1");
                    }                                        
                    linea = desplazarRecto(inicioAleatorio, 1);
                    trayectoriaTemp = null;
                    trayectoriaTemp = linea.getContorno().iterator();                    
                    emisor = -1;
                    receptor = 1;
                }               
            }           
        }
        /**
         * Establece las trayectorias para enviar la pelota
         */
        public void trayectoriaLanzamiento(){            
                //Comprueba si el jugador 1 le pego a la pelota
                if(golpeoPelota(PELOTA,RAQUETA1)){ 
                    Random r = new Random();
                    int opc = r.nextInt(3);
                    switch(opc){                                        
                        case 0 -> linea = desplazarRecto(PELOTA.getPuntoMedio(), -1);
                        case 1 -> {
                            linea = desplazarInclinado(PELOTA.getPuntoMedio(), -1);
                            if(linea == null)
                                trayectoriaLanzamiento();
                        }
                        case 2 -> {
                            linea = desplazarBorde(PELOTA.getPuntoMedio(),-1);
                            if(linea == null)
                                trayectoriaLanzamiento();
                        }
                    }    
                    trayectoriaTemp = null;
                    trayectoriaTemp = linea.getContorno().iterator();                                   
                    receptor = 1;  
                    emisor = -1;
                }
                
                else
                //Comprueba si el jugador 2 le pego a la pelota
                if(golpeoPelota(PELOTA,RAQUETA2)){ 
                    Random r = new Random();
                    int opc = r.nextInt(3);
                    switch(opc){
                        case 0 -> linea = desplazarRecto(PELOTA.getPuntoMedio(), 1);
                        case 1 -> {
                            linea = desplazarInclinado(PELOTA.getPuntoMedio(), 1);
                            if(linea == null)
                                trayectoriaLanzamiento();
                        }                                  
                        case 2-> {
                            linea = desplazarBorde(PELOTA.getPuntoMedio(), 1);
                            if(linea == null)
                                trayectoriaLanzamiento();
                        }
                    } 
                    
                    trayectoriaTemp = null;
                    trayectoriaTemp = linea.getContorno().iterator();
                    receptor = -1;  
                    emisor = 1;
                }                          
        }
        
       public boolean rebotar(Circulo pelota){ 
           try{
               if(golpeoPelota(pelota, CAMPO)){
                    LinkedList<Punto> listPelota = (LinkedList<Punto>)pelota.getContorno();
                    for(Punto p: listPelota){
                        if(p.getY() == 0 || p.getY() == AREAANOTACION2){
                            return true;
                        }
                    }
               }               
           }catch(Exception e){
                   return false;
            }
           return false;           
       }
       /**
        * Retorna al juagador que anoto un punto
        */
       public int anotacion(Circulo pelota, int emisor){           
           try{
               LinkedList<Punto> pelotaIterator = (LinkedList<Punto>)pelota.getContorno();
               for(int i = 0; i < pelotaIterator.size(); i ++){
                   if(pelotaIterator.get(i).getX() == AREAANOTACION1){
                       return -1;
                   }
                   if(pelotaIterator.get(i).getX() ==  AREAANOTACION2){
                       return 1;
                   }
                }
           }catch(Exception e){
               return 0;
           }
           return 0;
           
       }
        /**
         * valida si le pegaron a la pelota
         * 
         */
        public boolean golpeoPelota(Circulo pelota, Cuadrado raqueta){ 
            try{         
                LinkedList<Punto> pelotaIterator = (LinkedList<Punto>)pelota.getContorno();
                LinkedList<Punto> raquetaIterator = (LinkedList<Punto>)raqueta.getContorno();
                if(raquetaIterator != null && pelotaIterator != null){

                if(pelotaIterator.size() > raquetaIterator.size()){
                    for(int i = 0; i < pelotaIterator.size(); i ++){
                        Punto puntoPelota = pelotaIterator.get(i);
                        for(int j = 0; j < raquetaIterator.size();j++){
                            Punto puntoRaqueta = raquetaIterator.get(j);
                            if(puntoRaqueta.getX() == puntoPelota.getX() && puntoRaqueta.getY() == puntoPelota.getY()){                            
                                return true;
                            }
                        }
                    }
                }
               else
               if(pelota.getContorno().size() < raquetaIterator.size()){
                    for(int i = 0; i < raquetaIterator.size(); i ++){
                        Punto puntoRaqueta = raquetaIterator.get(i);
                        for(int j = 0; j < pelota.getContorno().size(); j ++){
                            Punto puntoPelota = pelotaIterator.get(j);
                            if(puntoRaqueta.getX() == puntoPelota.getX() && puntoRaqueta.getY() == puntoPelota.getY()){
                                return true;
                            }
                        }
                    }
                }

                }
            }catch(Exception e){
                return false; 
            } 
            return false;
        }
        /**
         * @param puntoInicial indica el punto donde la pelota va a dar el rebote
         * @param  envio indica si el jugador 1 es el receptor y el jugador 2 el que envia
         */
        private Linea desplazarRecto(Punto puntoInicial,int envio){       
            Punto puntoFinal = new Punto(AREAANOTACION2,puntoInicial.getY());
            Linea lineaRecta = new Linea(puntoInicial,puntoFinal);
            if(envio == 1){
                puntoFinal = new Punto(AREAANOTACION1,puntoInicial.getY());            
                lineaRecta = new Linea(puntoFinal,puntoInicial);
                Queue<Punto> colaTemp = lineaRecta.getContorno();
                Stack<Punto> pilaTemp = new Stack();                
                /**
                 * Invierte las coordenadas para que el recorrido sea de regreso
                 */
                while(!colaTemp.isEmpty()){
                    Punto puntoTemp = colaTemp.remove();
                    pilaTemp.push(puntoTemp);               
                }
                
                while(!pilaTemp.isEmpty()){
                    Punto puntoTemp = pilaTemp.pop();
                    colaTemp.add(puntoTemp);

                }
                lineaRecta = new Linea((LinkedList<Punto>)colaTemp);
            }
           return lineaRecta;
        }
        private Linea desplazarInclinado(Punto puntoInicial, int envio){
            Linea lineaTemp = null;
            Random numAleatorio = new Random();
            if(envio == -1){                
                int x = AREAANOTACION2;
                int y = numAleatorio.nextInt(AREAANOTACION2-30+1) + 30;
                Punto puntoFinal = new Punto(x,y);
                if(puntoInicial.getX() > x) {
                    lineaTemp = new Linea(puntoFinal,puntoInicial);

                }
                else{
                    lineaTemp = new Linea(puntoFinal,puntoInicial);
                    //JOptionPane.showMessageDialog(rootPane, lineaTemp.getContorno().size() + " Caso 2: " +lineaTemp.getPuntoInicial()+" "+lineaTemp.getPuntoFinal());

                }   
                if(lineaTemp.getContorno().size() < 2){                    
                    //desplazarBorde(puntoInicial, 1); 
                    return null;                    
                }
            }
            else
            if(envio == 1){                
                int x = AREAANOTACION1;
                int y = numAleatorio.nextInt(AREAANOTACION2-30+1) + 30;
                Punto puntoFinal = new Punto(x,y);
                lineaTemp = new Linea(puntoInicial,puntoFinal);
                Queue<Punto> colaTemp = lineaTemp.getContorno();
                Stack<Punto> pilaTemp = new Stack();                
                /**
                 * Invierte las coordenadas para que el recorrido sea de regreso
                 */
                while(!colaTemp.isEmpty()){
                    Punto puntoTemp = colaTemp.remove();
                    pilaTemp.push(puntoTemp);               
                }
                
                while(!pilaTemp.isEmpty()){
                    Punto puntoTemp = pilaTemp.pop();
                    colaTemp.add(puntoTemp);

                }
                lineaTemp = new Linea((LinkedList<Punto>)colaTemp);
                if(lineaTemp.getContorno().size() < 2){                    
                    //desplazarBorde(puntoInicial, 1); 
                    return null;                    
                }
            }           
            return lineaTemp;
        }
        
        private Linea desplazarBorde(Punto puntoInicial, int envio){
            Linea lineaTemp = null;
            Random numAleatorio = new Random();
            if(envio == -1){
                int mitad = AREAANOTACION2 / 2;                
                int x = numAleatorio.nextInt(AREAANOTACION2 - mitad + 1) + mitad; 
                 int bordeRamdom = numAleatorio.nextInt(2);
                int y = 0;               
                if(bordeRamdom == 0){
                    y = 0;
                }else{
                    y = AREAANOTACION2;                    
                }
                Punto puntoFinal = new Punto(x,y);
                lineaTemp = new Linea(puntoInicial,puntoFinal);
                if(lineaTemp.getContorno().size() < 2){                    
                    desplazarBorde(puntoInicial, 1); 
                    return null;
                    
                }
            }
            if(envio == 1){
                numAleatorio = new Random();
                int mitad = AREAANOTACION2 / 2;
                int x = numAleatorio.nextInt(mitad);
                int bordeRamdom = numAleatorio.nextInt(2);
                int y;
                if(bordeRamdom == 0){
                    y = 0;
                }else{
                    y = AREAANOTACION2;                    
                }
                Punto puntoFinal = new Punto(x,y);                
                lineaTemp = new Linea(puntoInicial,puntoFinal);
                if(lineaTemp.getContorno().size() < 2){                    
                    desplazarBorde(puntoInicial, 1); 
                    return null;
                    
                }
                
                Queue<Punto> colaTemp = lineaTemp.getContorno();
                Stack<Punto> pilaTemp = new Stack();                
                /**
                 * Invierte las coordenadas para que el recorrido sea de regreso
                 */
                while(!colaTemp.isEmpty()){
                    Punto puntoTemp = colaTemp.remove();
                    pilaTemp.push(puntoTemp);               
                }
                
                while(!pilaTemp.isEmpty()){
                    Punto puntoTemp = pilaTemp.pop();
                    colaTemp.add(puntoTemp);

                }
                lineaTemp = new Linea((LinkedList<Punto>)colaTemp);
            }            
            return lineaTemp;
        }
         /**
     * @return reotarno un punto aleatorio para el inicio de la partida
     */
        private Punto getPuntoInicio(){
            Random numAleatorio = new Random();
            int x = AREAANOTACION2 / 2;
            int y = numAleatorio.nextInt(300-30+1) + 30;
            return new Punto(x,y);  
        }
        
        /*private void animarPelota(){
            //private Circulo PELOTA = new Circulo(20,new Punto(300,300))
            //Cuadrado animacion = new Cuadrado(500,500, WIDTH, ABORT);
            Queue<Punto> aux = PELOTA.getContorno();
            //for(int i = 0; i < 90; i ++){
                Queue<Punto> auxF = tranformaciones.escalar(400, 400, PELOTA.getPuntoMedio(), PELOTA.getContorno());
                PELOTA.setContorno(auxF);
                actualizarLienzo();            
        }*/
        
       public void animacionGanador(Cuadrado raqueta){
           
           try {
               
                    Queue<Punto> auxQ = RAQUETA1.getContorno();
                    Iterator<Punto> aux = raqueta.getContorno().iterator();
                    for(int i = 0; i < 40; i ++){
                        Queue<Punto> temp = raqueta.getContorno();
                         raqueta.setContorno(tranformaciones.rotar(raqueta.getPuntoMedio().getX(), raqueta.getPuntoMedio().getY(), 45, temp));
                        //centro.setContorno(.escalar(-2, -2, RAQUETA1.getPuntoMedio(), temp));
                         sleep(10);
                        actualizarLienzo();
                    }
                    //raqueta = new Cuadrado(new Punto(POSXJUGADOR1,POSINICIAL),TAMANIORAQUETA,20);
                } catch (InterruptedException ex) {
                    //Logger.getLogger(Fin.class.getName()).log(Level.SEVERE, null, ex);
                }
       } 
       public void animacionPerdedor(Cuadrado raqueta){
           
           try {
               
                    //Queue<Punto> auxQ = RAQUETA1.getContorno();
                    Iterator<Punto> aux = raqueta.getContorno().iterator();
                    for(int i = 0; i < 20; i ++){
                        Queue<Punto> temp = raqueta.getContorno();
                        raqueta.setContorno(tranformaciones.escalar(2, 2, raqueta.getPuntoMedio(), temp));
                        sleep(100);
                        actualizarLienzo();
                    }
                    //raqueta = new Cuadrado(new Punto(POSXJUGADOR1,POSINICIAL),TAMANIORAQUETA,20);
                } catch (InterruptedException ex) {
                   return;
                }
       } 
    }
    
    
    /**
     * Repinta el lienzo
     */
    private void actualizarLienzo(){
        TABLERO.repaint();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VistaJuego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VistaJuego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VistaJuego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VistaJuego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

                VistaJuego  v = new VistaJuego();
                v.setSize(600, 700);
                
                v.setVisible(true);
                
                
                
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel areaJuego;
    private javax.swing.JPanel areaPuntaje;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel score1;
    private javax.swing.JLabel score2;
    // End of variables declaration//GEN-END:variables
}
